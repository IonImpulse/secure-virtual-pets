#!/usr/bin/env python

import json
import requests 
import os 
import argparse

import maskpass

path = os.path.dirname(os.path.abspath(__file__))

default_port = 3000

def menu():

    header()

    print("Secure Virtual Pets\n")

    command_list()
    #Prints out initial command list
    while True:

        dec = input('> ')

        dec = dec.rstrip()

        if dec == '1':
            login()
        elif dec == '2': 
            signup() 
        elif dec == 'quit':
            break
        else:
            print("I'm sorry, I didn't recognize that command.")

def login():
    server = input("Server: ");
    username = input("Username: ");
    password = maskpass.askpass(prompt="Password: ")

    login_payload = {"password": password, "username": username } 
    login_payload = json.dumps(login_payload)
    # gonna have to fix this in a real networking-orinented way
    print(requests.get(server, verify='/home/cole/Documents/School/CS/181S/secure-virtual-pets/svp-backend/cert.pem'))
    pass


def signup():
    server = input("Server: ")
    email = input("Your Email: ");
    username = input("Username: ");
    password = maskpass.askpass(prompt="Password: ")

    signup_payload = { "email": email ,   "password": password, "username": username } 
    signup_payload = json.dumps(signup_payload)

    response = requests.post(server, verify='/home/cole/Documents/School/CS/181S/secure-virtual-pets/svp-backend/cert.pem', data=signup_payload)

    print(response)

def header():

    print(r"""
 $$$$$$\  $$\    $$\ $$$$$$$\  
$$  __$$\ $$ |   $$ |$$  __$$\ 
$$ /  \__|$$ |   $$ |$$ |  $$ |
\$$$$$$\  \$$\  $$  |$$$$$$$  |
 \____$$\  \$$\$$  / $$  ____/ 
$$\   $$ |  \$$$  /  $$ |      
\$$$$$$  |   \$  /   $$ |      
 \______/     \_/    \__|      
 """)
                               
#header. Prints the nice header. ASCII art generated by patorjk's TAAG

def command_list():
    print("""
    [\033[32m1\033[0m] : Login
    [\033[32m2\033[0m] : Signup 
    quit : close the program
    """)

if __name__ == "__main__": 

    # Command-line parsing
    #   Require user to specify filename, columns, and k on the command-line.
    parser = argparse.ArgumentParser()
    args = parser.parse_args()
    signup()

